// Sweep
// by BARRAGAN <http://barraganstudio.com> 
// This example code is in the public domain.


#include <Servo.h> 
#include <Time.h>
 
Servo Rservo;  // create servo object to control a servo 
Servo Lservo;  // create servo object to control a servo 
                // a maximum of eight servo objects can be created 
float Rpos=0;
float Lpos=0;
float Xinit=0;
float Yinit=0;
float Xlocation=Xinit;
float Ylocation=Yinit;
float Xres=.05;
float Yres=.04;
float stepSize=.05;
float scaleFactor=(.01);
void gotoPosition(float x, float y)//the central method...goes laterally, then vertically
{
  float Xtime=scaleFactor*(x-Xlocation);
  float Ytime=scaleFactor*(y-Ylocation);
  
  
  if ((x-Xinit)*scaleFactor>5.5||(y-Yinit)*scaleFactor>4||(x-Xinit)<0||(y-Yinit)<0)//saftey first
  {
    Serial.println("Error code 23400510347693023A: Off Screen");
    //Serial.println((x-Xinit)*scaleFactor);
    //Serial.println((y-Yinit)*scaleFactor);
    delay(1000000000);
  }
  if(Ytime>Yres || Ytime <-Yres)
  {
  if(Xtime>Xres)
  {
      Rservo.attach(9);
      Rpos=180;
      Rservo.write(Rpos);
      delay(1000*Xtime);
      Rservo.detach();
      Xlocation=x;
  }
  else if (Xtime<-Xres)
  {
      Rservo.attach(9);
      Rpos=0;
      Rservo.write(Rpos);
      delay(-1000*Xtime);
      Rservo.detach();
      Xlocation=x;
  }
  else {
  Serial.println("Error Code 13435Ao4H: Too small in x");
  }
  }

  if(Xtime>Xres ||Xtime <-Xres)
 { 
  if(Ytime>Yres)
  {
      Lservo.attach(10);
      Lpos=0;
      Lservo.write(Lpos);
      delay(1000*Ytime);
      Lservo.detach();
      Ylocation=y;
  }
  else if (Ytime<-Yres)
  {
      Lservo.attach(10);
      Lpos=180;
      Lservo.write(Lpos);
      delay(-1000*Ytime);
      Lservo.detach();
      Ylocation=y;
  }
  else {
  Serial.println("Error Code 13435sdfAo4H: Too small in y");
  }
 }

  Serial.print((Xlocation-Xinit));
  Serial.print(",");
  Serial.println((Ylocation-Yinit)); 
}
//////////////////////////////////////////////////////////////////////
void svgL(float x1, float y1){//for linear b curves
  float xcoor;
  float ycoor;
  for(float i=0;i<1;i+=stepSize)
  {
  xcoor=(1-i)*(Xlocation)+(i)*(x1);
  ycoor=(1-i)*(Ylocation)+(i)*(y1);
  gotoPosition(xcoor,ycoor);
  //Serial.print(xcoor);
  //Serial.println(ycoor);
  }
}
void svgl(float x1, float y1){//relative
svgL(Xlocation+x1,Ylocation+y1);
}
void svgQ(float x1, float y1, float x2, float y2){//for quadratic b curves
  float xcoor;
  float ycoor;
  for(float i=0;i<1;i+=stepSize)
  {
  xcoor=(1-i)*(1-i)*(Xlocation)+2*(1-i)*(i)*(x1)+i*i*(x2);
  ycoor=(1-i)*(1-i)*(Ylocation)+2*(1-i)*(i)*(y1)+i*i*(y2);
  gotoPosition(xcoor,ycoor);
  //Serial.print(xcoor);
  //Serial.println(ycoor);
  }
}
  
void svgq(float x1, float y1, float x2, float y2){//relative version http://www.w3.org/TR/SVG11/paths.html
svgQ(Xlocation+x1,Ylocation+y1, Xlocation+x2,Ylocation+y2);
}

void svgC(float x1, float y1, float x2, float y2, float x3, float y3){//svgC
  float xcoor;
  float ycoor;
  for(float i=0;i<1;i+=stepSize)
  {
  xcoor=(1-i)*(1-i)*(1-i)*(Xlocation)+3*(1-i)*(1-i)*(i)*(x1)+3*(1-i)*i*i*(x2)+i*i*i*(x3);
  ycoor=(1-i)*(1-i)*(1-i)*(Ylocation)+3*(1-i)*(1-i)*(i)*(y1)+3*(1-i)*i*i*(y2)+i*i*i*(y3);
  gotoPosition(xcoor,ycoor);
  //Serial.print(xcoor);
  //Serial.println(ycoor);
  }
}

void svgc(float x1, float y1, float x2, float y2, float x3, float y3){//svgc since c is relative
svgc(Xlocation+x1,Ylocation+y1, Xlocation+x2,Ylocation+y2,Xlocation+x3,Ylocation+y3);
}

void setup() 
{ 
  //Rservo.attach(9);  // attaches the servo on pin 9 to the servo object 
  //Lservo.attach(10);  // attaches the servo on pin 9 to the servo object   
   Serial.begin(9600); // not really necessary
   Serial.println("New Run");
} 
 
 
void loop() 
{ 
  float xcoor;
  float ycoor;
  //here is the code generated by python:
  
//  gotoPosition(1,1);
  
gotoPosition(289.09688,145.09543);
svgC(284.35664,152.81332,276.05564,160.49346,265.08965,167.31121);
svgC(258.48037,138.5593,258.97923,113.00451,262.71068,91.566914);
svgC(273.53918,97.896888,281.99539,105.03166,287.2988,112.23958);
svgC(287.2988,112.23958,323.23426,72.934068,323.23426,72.934068);
svgC(311.90022,60.560177,296.9988,49.720559,279.4368,41.00498);
svgC(286.47842,27.130121,292.73079,19.534199,292.73079,19.534199);
svgC(292.73079,19.534199,243.0801,0.5,243.0801,0.5);
svgC(243.0801,0.5,226.60895,23.15478,226.60895,23.15478);
svgC(210.00917,19.738161,192.33416,17.882416,173.98725,17.882416);
svgC(150.63853,17.882416,128.37176,20.873338,108.04279,26.287594);
svgC(108.04279,26.287594,89.995212,7.1203986,89.995212,7.1203986);
svgC(89.995212,7.1203986,41.175944,25.325369,41.175944,25.325369);
svgC(46.474954,33.151871,51.201863,40.785488,55.407794,48.219585);
svgC(21.696155,68.672703,0.62886609,97.743913,0.62886609,129.99888);
svgC(0.62886609,165.88779,26.702416,197.8368,67.265083,218.3609);
svgC(57.658205,235.12029,47.798554,243.78047,47.798554,243.78047);
svgC(47.798554,243.78047,99.098793,259.5,99.098793,259.5);
svgC(99.098793,259.5,115.29507,235.52824,115.29507,235.52824);
svgC(133.62642,239.79846,153.38781,242.12203,173.98725,242.12203);
svgC(192.8086,242.12203,210.92044,240.17097,227.8882,236.58803);
svgC(227.8882,236.58803,247.21952,257.02122,247.21952,257.02122);
svgC(247.21952,257.02122,292.73079,235.50607,292.73079,235.50607);
svgC(289.12347,229.30697,285.87984,223.19871,282.95545,217.19249);
svgC(299.9365,208.30396,314.28365,197.38896,325.08113,185.00399);
svgC(325.08113,185.00399,289.09688,145.09543,289.09688,145.09543);

/*
svgC(41.371094,13.66457,41.371094,11.457539,41.371094,9.250508);
svgC(43.180621,9.4257387,43.963014,11.704559,43.286137,13.215517);
svgC(42.859084,15.059792,42.939241,17.3996,44.601487,18.625335);
svgC(46.710544,19.683477,49.38774,17.353112,48.803268,15.118437);
svgC(48.93196,13.406538,48.236292,11.613848,48.968862,9.9690415);
svgC(51.055097,9.6500357,51.500677,12.487155,50.544985,13.844747);
svgC(50.070023,15.309708,50.857452,16.781898,50.672344,18.239432);
svgC(50.279615,19.94056,48.418404,20.00023,47.0225,20.071868);
svgC(45.478489,20.38194,43.516835,20.791368,42.361947,19.38874);
svgC(41.522514,18.444089,41.211274,17.107671,41.371094,15.871601);*/
 // gotoPosition(0,0);
  delay(10000000);
}


